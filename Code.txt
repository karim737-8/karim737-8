// @dart=2.9
import 'package:db_app/modules/archive_tasks_screen/archive_tasks.dart';
import 'package:db_app/modules/done_tasks_screen/done_tasks.dart';
import 'package:db_app/modules/new_tasks_screen/new_tasks.dart';
import 'package:db_app/shared/components/component.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:sqflite/sqflite.dart';


class HomeLayoutScreen extends StatefulWidget {

  @override
  _HomeLayoutScreenState createState() => _HomeLayoutScreenState();
}

class _HomeLayoutScreenState extends State<HomeLayoutScreen> {
  int currentIndex = 0;
  List<Widget> screens =[
    NewTasksScreen(),
    DoneTasksScreen(),
    ArchiveTasksScreen(),
  ];

  List<String> titles = [
    'New Tasks',
    'Done Tasks',
    'Archive Tasks',
  ];
  Database database;

  var scaffoldKey = GlobalKey<ScaffoldState>();
  bool isBottomSheetShown = false;
  IconData fabIcon = Icons.edit;
  var isTitle = TextEditingController();
  var isDate = TextEditingController();
  var isTime = TextEditingController();
  var formKey = GlobalKey<FormState>();


  @override
  void initState() {

    super.initState();
    createDatabase();
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: scaffoldKey,
      appBar: AppBar(
        title: Text(
          titles[currentIndex],
          style: TextStyle(
            fontSize: 25.0,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      body:screens[currentIndex],
      floatingActionButton: FloatingActionButton(
        mini: true,
        onPressed: ()
        {
            if(isBottomSheetShown){
              if(formKey.currentState.validate())
              {
                insertToDatabase(
                  date: isDate.text,
                  time: isTime.text,
                  title: isTitle.text,
                ).then((value){
                  Navigator.pop(context);
                  isBottomSheetShown = false;
                  setState(() {
                    fabIcon = Icons.edit;
                  });
                });
              }
          }else{
            scaffoldKey.currentState.showBottomSheet(
                  (context) =>
                      Padding(
                        padding: const EdgeInsets.all(20.0),
                        child: Container(
                          width: double.infinity,
                          child: Form(
                            key: formKey,
                            child: Column(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                defaultFormField(
                                  label: 'Title',
                                  prefix: Icons.title,
                                  controller: isTitle,
                                  type: TextInputType.text,
                                  onTap:()
                                  {
                                    print('Title Tapped');
                                  },
                                  validate: (String value)
                                  {
                                    if(value.isEmpty)
                                    {
                                      print('Title must not be empty');
                                    }
                                    return null;
                                  },
                                ),
                                SizedBox(
                                  height: 10.0,
                                ),
                                defaultFormField(
                                  type: TextInputType.datetime,
                                  label: 'Date',
                                  prefix: Icons.calendar_today,
                                  controller: isDate,
                                  onTap:()
                                  {
                                    showDatePicker(
                                      context: context,
                                      initialDate: DateTime.now(),
                                      firstDate: DateTime.now(),
                                      lastDate: DateTime.parse('2022-10-23'),
                                    ).then((value)
                                    {
                                      isDate.text = DateFormat.yMMMd().format(value);
                                    });
                                  },
                                  validate: (String value)
                                  {
                                    if(value.isEmpty)
                                    {
                                      print('Date must not be empty');
                                    }
                                    return null;
                                  },
                                ),
                                SizedBox(
                                  height: 10.0,
                                ),
                                defaultFormField(
                                  type: TextInputType.datetime,
                                  label: 'Time',
                                  prefix: Icons.watch_later_outlined,
                                  controller: isTime,
                                  onTap:()
                                  {
                                    showTimePicker(
                                      context: context,
                                      initialTime: TimeOfDay.now(),
                                    ).then((value)
                                    {
                                      isTime.text = value.format(context).toString();
                                      print(value.format(context));
                                    });
                                  },
                                  validate: (String value)
                                  {
                                    if(value.isEmpty)
                                    {
                                      print('Time must not be empty');
                                    }
                                    return null;
                                  },
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
            );
            isBottomSheetShown = true;
            setState(() {
              fabIcon = Icons.add;
            });
          }

        },
        child: Icon(
          fabIcon,
        ),
      ),
      bottomNavigationBar: BottomNavigationBar(
        onTap: (index)
        {
          setState(() {
             currentIndex = index;
          });
        },
        currentIndex: currentIndex,
        type: BottomNavigationBarType.fixed,
        items: [
          BottomNavigationBarItem(
              icon: Icon(
                Icons.menu,
              ),
            label: 'Tasks'
          ),
          BottomNavigationBarItem(
              icon: Icon(
                Icons.check_circle_outline,
              ),
            label: 'Done'
          ),
          BottomNavigationBarItem(
              icon: Icon(
                Icons.archive_outlined,
              ),
            label: 'Archive'
          ),
        ],
      ),


    );
  }


  Future<String> getName() async
  {
    return'karim mohamed';
  }

 void createDatabase() async
 {
    database = await openDatabase(
      'todo.bd',
      version: 1,
      onCreate: (database, version)
      {

        database.execute('CREATE TABLE tasks (id INTEGER PRIMARY KEY, title STRING, data STRING, time STRING, status STRING)').then((value)
        {
          print('Data Base IS Created');
        }).catchError((error)
        {
          print('Error ${error.toString()}');
        });
        print('Table IS Created');
      },
      onOpen: (database)
      {
        print('Data Base IS opened');
      },
    );


 }

 Future insertToDatabase({
   @required String title,
   @required String time,
   @required String date,
}) async
 {
   return await database.transaction((txn)
    {
      txn.rawInsert ('INSERT INTO tasks (title, date, time, status) VALUES ("$title", "$date", "$time", "NEW")',
      ).then((value)
      {
        print('$value Inserted Successfully');
      }).catchError((error)
      {
        print('Error When Inserting Table ${error.toString()}');
      });
      return null;
    });
 }

}
